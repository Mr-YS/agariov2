<!DOCTYPE html>
<html>
<head>
	<script src="http://underscorejs.org/underscore-min.js"></script>
	<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
	<link rel="stylesheet" href="http://meyerweb.com/eric/tools/css/reset/reset.css" />
	<style>
		body {
			overflow: hidden;
		}
	</style>
</head>
<body>
	<canvas id="main" />
	<script>
		var ctx = $('#main')[0].getContext('2d');
		var mapWidth = 5000;
		var mapHeight = 5000;
		var w = window.innerWidth;
		var h = window.innerHeight;
		var cameraX = mapWidth/2;
		var cameraY = mapHeight/2;
		var mousePositionX = w/2;
		var mousePositionY = h/2;
		var count = 1;
		var scale = 1;
		var cells = [];
		var food = [];
		var limit = 3000;
		var mass = 10; //total mass
		var colorList = [
			'Yellow',
			'Aqua',
			'Blue',
			'Chartreuse',
			'DarkOrange',
			'DarkOrchid',
			'DeepPink',
			'Fuchsia',
			'Gold',
			'Red'
		];
		var cellColor = colorList[Math.floor(Math.random() * colorList.length)];
		$(window).keydown( function(event) { 
			if(event.keyCode === 32){
				split();
			}
		});
		$('#main').mousemove( function(event) {
			mousePositionX = event.pageX-w/2;
			mousePositionY = event.pageY-h/2;
		});
		$(document).ready( function() {
			init();
			canvasResize();
			setInterval(draw,16);
			setInterval(regenerateFood,10);
			setInterval(naturalLoss, 1000);
		});
		$(window).resize( function() {
			canvasResize();
		});
		function canvasResize() {
			ctx.canvas.width = w = window.innerWidth;
			ctx.canvas.height = h = window.innerHeight;
		}
		function init() {
			cells.push({
				mass:10,
				x:cameraX,
				y:cameraY
			});
		}
		function draw() {
			var bc = _.max(cells,function(cell){ return cell.mass;});
			var mvSize = Math.sqrt(Math.pow(mousePositionX, 2) + Math.pow(mousePositionY, 2));
			if(mvSize > 10){
				cameraX = Math.min(mapWidth,Math.max(0,cameraX + mousePositionX/mvSize/bc.mass*100));
				cameraY = Math.min(mapHeight,Math.max(0,cameraY + mousePositionY/mvSize/bc.mass*100));
			}
			for(var i=0;i<cells.length;++i){
				cells[i].x += ((cameraX-cells[i].x));
				cells[i].y += ((cameraY-cells[i].y));
			}
			ctx.clearRect(0 ,0 ,ctx.canvas.width,ctx.canvas.height);
			var rx = scale*w;
			var ry = scale*h;
			for(var i=0;i<food.length;++i) {
				if((cameraX-rx/2)<food[i].x && (cameraX+rx/2)>food[i].x && (cameraY-ry/2)<food[i].y && (cameraY+ry/2)>food[i].y){
					circle((food[i].x-cameraX)/scale+w/2, (food[i].y-cameraY)/scale+h/2, 5/scale, food[i].color);
				}
			}
			scale = mass>=128 ? mass/128 : 1;
			collisionCheck();
			for(var i=0;i<cells.length;++i) {
				eatFood(i);
				drawCell(i);
			}
		}
		function collisionCheck() {
			for(var i=0;i<cells.length-1;++i){
				for(var j=i+1;j<cells.length;++j){
					var dc = Math.sqrt(Math.pow(cells[i].x-cells[j].x,2)+Math.pow(cells[i].y-cells[j].y,2));
					if(dc<(cells[i].mass+cells[j].mass)){
						if(cells[i].x < cells[j].x){
							cells[i].x -= cells[i].mass;
							cells[j].x += cells[j].mass;
							cells[i].y -= 10;
							cells[j].y += 10;	
						}
						else{
							cells[i].x += cells[i].mass;
							cells[j].x -= cells[j].mass;
							cells[i].y += 10;
							cells[j].y -= 10;
						}
					}
				}
			}
		}
		function drawCell(i) { 
			circle((cells[i].x-cameraX)/scale+w/2, (cells[i].y-cameraY)/scale+h/2, cells[i].mass/scale, cellColor);
			ctx.font = '24px Arial';
			ctx.strokeStyle = 'black';
			ctx.strokeText(Math.round(cells[i].mass),(cells[i].x-cameraX)/scale+w/2,(cells[i].y-cameraY)/scale+h/2);
		}
		function naturalLoss() {
			for(var i=0;i<cells.length;++i){
				if(cells[i].mass >= 128) {
					cells[i].mass -= 0.02*(Math.random()*(cells[i].mass-128));
				}
			}
		}
		function eatFood(j) {
			var index = [];
			for(var i=0;i<food.length;++i) {
				var d = Math.sqrt(Math.pow(cells[j].x-food[i].x,2)+Math.pow(cells[j].y-food[i].y,2));
				if(d <= cells[j].mass) {
					index.push(i);	
				}
			}
			for(var i=0;i<index.length;++i) {
				var f = food.splice(index[i],1)[0];
				var c = Math.round(cells[j].mass / 10);
				cells[j].mass += (f.size/c);
				mass += (f.size/c);
			}
		}
		function regenerateFood() {
			if(food.length < limit) {
				var p = {color : colorList[Math.floor(Math.random()*colorList.length)], x : Math.random()*mapWidth , y : Math.random()*mapHeight, size : Math.random()*2+1};
				var d = Math.sqrt(Math.pow(cameraY-p.x,2)+Math.pow(cameraY-p.y,2));
				if(d > mass+p.size) {
					food.push(p);		
				}
			}
		}
		function circle(x,y,r,color) {
			ctx.beginPath();
			ctx.arc(x, y, r, 0, 2*Math.PI);
			ctx.strokeStyle = color;
			ctx.fillStyle = color;
			ctx.fill();
			ctx.stroke();
		}
		function split() {
			count = Math.min(16,count*2);
			if(count > 16){
				return;
			}
			else{
				console.log(count);
				cells.push({mass:10,x:cameraX,y:cameraY});
			}
		}
	</script>
</body>
</html>
