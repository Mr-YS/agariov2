<!DOCTYPE html>
<html>
<head>
	<script src="http://underscorejs.org/underscore-min.js"></script>
	<!--<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script-->
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
	<link rel="stylesheet" href="http://meyerweb.com/eric/tools/css/reset/reset.css" />
	<style>
		body {
			overflow: hidden;
		}
	</style>
</head>
<body>
	<canvas id="main" />
	<script>
		var ctx = $('#main')[0].getContext('2d');
		var mapWidth = 5000;
		var mapHeight = 5000;
		var w = window.innerWidth;
		var h = window.innerHeight;
		var cameraX = mapWidth/2;
		var cameraY = mapHeight/2;
		var mousePositionX = w/2;
		var mousePositionY = h/2;
		var count = 1;
		var scale = 1;
		var cells = [];
		var foods = [];
		var limit = 3000;
		var mass = 10; //total mass
		var colorList = [
			'Yellow',
			'Aqua',
			'Blue',
			'Chartreuse',
			'DarkOrange',
			'DarkOrchid',
			'DeepPink',
			'Fuchsia',
			'Gold',
			'Red'
		];
		var cellColor = colorList[Math.floor(Math.random() * colorList.length)];
		function food(x,y,color,edge){
			var self = this;
			
			self.x = x;
			self.y = y;
			self.color = color;
			self.mass = 10;
			self.edge = edge;
			self.draw = function(){
				var relX = (self.x - cameraX) / scale + w / 2;
				var relY = (self.y - cameraY) / scale + h / 2;
				
				ctx.fillStyle = self.color;
				ctx.beginPath();
				ctx.moveTo(relX+self.mass, relY);
				for(var i=1;i<self.edge;++i) {
					ctx.lineTo(Math.cos(i*Math.PI/180*(360/(self.edge)))*self.mass+relX,Math.sin(i*Math.PI/180*(360/(self.edge)))*self.mass+relY);
				}
				ctx.lineTo(relX+self.mass, relY);
				ctx.closePath();
                        	ctx.fill();
			}
		}
		function cell(x,y,mass,color){
			var self = this;
			
			self.x = x;
			self.y = y;
			self.targetX = x;
			self.targetY = y;
			self.time = 0;
			self.mass = mass;
			self.color = color;
			self.draw = function(){
				var relX = (self.x - cameraX) / scale + w / 2;
				var relY = (self.y - cameraY) / scale + h / 2;
				var randX = Math.random();
				var randY = Math.random();
				
				ctx.strokeStyle = 'black';
				ctx.lineWidth = 5;
				ctx.fillStyle = self.color;
				ctx.beginPath();
				ctx.moveTo(relX+self.mass+(randX-0.5)*1.1, relY + (randY - 0.5)*1.1);
				for(var i=1;i<self.mass+10;++i) {
					ctx.lineTo(Math.cos(i*Math.PI/180*(360/(self.mass+10)))*self.mass+relX+(Math.random()-0.5)*1.1,Math.sin(i*Math.PI/180*(360/(self.mass+10)))*self.mass+relY+(Math.random()-0.5)*1.1);
				}
				ctx.lineTo(relX+self.mass+(randX-0.5)*1.1, relY + (randY - 0.5)*1.1);
				ctx.closePath();
                        	ctx.fill();
                        	ctx.stroke();
				ctx.lineWidth = 1;
				ctx.font = '24px Arial';
                        	ctx.strokeStyle = 'black';
                        	ctx.strokeText(Math.round(self.mass),(self.x-cameraX)/scale+w/2,(self.y-cameraY)/scale+h/2);
			}
			setInterval(function(){
				self.time++;
			},1000)
		}
		$(window).keydown( function(event) { 
			if(event.keyCode === 32){
				split();
			}
		});
		$('#main').mousemove( function(event) {
			mousePositionX = event.pageX-w/2;
			mousePositionY = event.pageY-h/2;
		});
		$(document).ready( function() {
			init();
			canvasResize();
			setInterval(draw,16);
			setInterval(regenerateFood,10);
			setInterval(naturalLoss, 1000);
		});
		$(window).resize( function() {
			canvasResize();
		});
		function canvasResize() {
			ctx.canvas.width = w = window.innerWidth;
			ctx.canvas.height = h = window.innerHeight;
		}
		function init() {
			cells.push(new cell(cameraX,cameraY,10,cellColor));
		}
		function move() {
			var targetX = mousePositionX+cameraX;
			var targetY = mousePositionY+cameraY;
			var bc = _.max(cells,function(cell){ return cell.mass;});
			cameraX = _.reduce(cells, function(memo, num){return memo+num.x;},0)/cells.length;
			cameraY = _.reduce(cells, function(memo, num){return memo+num.y;},0)/cells.length;
			for(var i=0;i<cells.length;++i){
				cells[i].time++;
				var v = 2;
				if(cells[i].time >= 0){
					cells[i].targetX = targetX;
					cells[i].targetY = targetY;
					v = 5;	
				}
				cells[i].x = Math.max(0,Math.min(mapWidth,cells[i].x+(cells[i].targetX-cells[i].x)/cells[i].mass/v));
				cells[i].y = Math.max(0,Math.min(mapHeight,cells[i].y+(cells[i].targetY-cells[i].y)/cells[i].mass/v));
			}
		}
		function draw() {
			ctx.clearRect(0 ,0 ,ctx.canvas.width,ctx.canvas.height);
			var rx = scale*w;
			var ry = scale*h;
			for(var i=0;i<foods.length;++i) {
				if((cameraX-rx/2)<foods[i].x && (cameraX+rx/2)>foods[i].x && (cameraY-ry/2)<foods[i].y && (cameraY+ry/2)>foods[i].y){
					foods[i].draw();
				}
			}
			scale = mass>=128 ? mass/128 : 1;
			collisionCheck();
			move();
			for(var i=0;i<cells.length;++i) {
				eatFood(i);
				cells[i].draw();
			}
		}
		function collisionCheck() {
			for(var i=0;i<cells.length-1;++i){
				for(var j=i+1;j<cells.length;++j){
					var dc = Math.sqrt(Math.pow(cells[i].x-cells[j].x,2)+Math.pow(cells[i].y-cells[j].y,2));
					if(dc<(cells[i].mass+cells[j].mass)){
						
					}
				}
			}
		}
		function naturalLoss() {
			for(var i=0;i<cells.length;++i){
				if(cells[i].mass >= 128) {
					cells[i].mass -= 0.02*(Math.random()*(cells[i].mass-128));
				}
			}
		}
		function eatFood(j) {
			var new_foods = [];
			for(var i=0;i<foods.length;++i) {
				var d = Math.sqrt(Math.pow(cells[j].x-foods[i].x,2)+Math.pow(cells[j].y-foods[i].y,2));
				if(d <= cells[j].mass) {
					var c = Math.round(cells[j].mass / 10);
					cells[j].mass += (foods[i].mass/c);
					mass += (foods[i].mass/c);
				}
				else {
					new_foods.push(foods[i]);
				}
			}
			foods = new_foods;
		}
		function regenerateFood() {
			if(foods.length < limit) {
				var p = new food(Math.random() * mapWidth, Math.random() * mapHeight, colorList[Math.floor(Math.random()*colorList.length)], Math.floor(Math.random() * 3 + 5));
				var d = Math.sqrt(Math.pow(cameraY-p.x,2)+Math.pow(cameraY-p.y,2));
				if(d > mass+p.mass) {
					foods.push(p);		
				}
			}
		}
		function split() {
			if(count >= 16){
				return;
			}
			else{
				var cl = cells.length;
				for(var i=0;i<cl;++i){
					if(cells[i].mass > 29){
						var e = cells[i].mass /= 2;
						var a = Math.sqrt(Math.pow(mousePositionX,2)+Math.pow(mousePositionY,2));
						if(a == 0){
							a = 1;	
						}
console.log(a);
						var newCell = new cell(cells[i].x,cells[i].y,e,cellColor);
						newCell.time = -20;
						newCell.targetX = mousePositionX/a+cells[i].x;
						newCell.targetY = mousePositionY/a+cells[i].y;
						cells.push(newCell);
						count ++;
						if(count == 16){
							return;
						}
					}
				}
			}
		}
	</script>
</body>
</html>
